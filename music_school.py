# -*- coding: utf-8 -*-
"""music_school.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fGNaPiy0rcNEP0p7NNyDSIwsy1yo93xa

# Task
Create a new Python notebook that contains fictitious data of music school students and demonstrate how to perform SQL-like queries using pandas.

## Generate data

### Subtask:
Create a Python script to generate fictitious data for music school students, including information like student ID, name, age, instrument, and enrollment date.

**Reasoning**:
Create a Python script to generate fictitious student data and save it to a CSV file.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile generate_student_data.py
# import pandas as pd
# from datetime import datetime, timedelta
# import random
# 
# # Generate fictitious data
# data = [
#     {'student_id': 101, 'name': 'Alice Smith', 'age': 16, 'instrument': 'Piano', 'enrollment_date': datetime(2023, 9, 1)},
#     {'student_id': 102, 'name': 'Bob Johnson', 'age': 17, 'instrument': 'Guitar', 'enrollment_date': datetime(2023, 9, 1)},
#     {'student_id': 103, 'name': 'Charlie Brown', 'age': 15, 'instrument': 'Violin', 'enrollment_date': datetime(2023, 9, 15)},
#     {'student_id': 104, 'name': 'Diana Prince', 'age': 18, 'instrument': 'Drums', 'enrollment_date': datetime(2023, 10, 1)},
#     {'student_id': 105, 'name': 'Ethan Hunt', 'age': 16, 'instrument': 'Piano', 'enrollment_date': datetime(2023, 10, 15)},
#     {'student_id': 106, 'name': 'Fiona Glenanne', 'age': 17, 'instrument': 'Flute', 'enrollment_date': datetime(2023, 11, 1)},
#     {'student_id': 107, 'name': 'George Jetson', 'age': 15, 'instrument': 'Guitar', 'enrollment_date': datetime(2023, 11, 15)},
#     {'student_id': 108, 'name': 'Helen Parr', 'age': 18, 'instrument': 'Cello', 'enrollment_date': datetime(2023, 12, 1)},
#     {'student_id': 109, 'name': 'Ian Malcolm', 'age': 16, 'instrument': 'Piano', 'enrollment_date': datetime(2024, 1, 1)},
#     {'student_id': 110, 'name': 'Jane Doe', 'age': 17, 'instrument': 'Trumpet', 'enrollment_date': datetime(2024, 1, 15)},
      {'student_id': 111, 'name': 'Elias Cruz', 'age': 43, 'instrument': 'Saxophone', 'enrollment_date': datetime(1982, 3, 08)},  
      {'student_id': 111, 'name': 'Pedro Lima Cruz', 'age': 11, 'instrument': 'Xbox', 'enrollment_date': datetime(2006, 3, 08)},    
# ]
# 
# # Convert to DataFrame
# df = pd.DataFrame(data)
# 
# # Save to CSV
# df.to_csv('students.csv', index=False)
# 
# print("Fictitious student data generated and saved to students.csv")
#

"""**Reasoning**:
The Python script has been created. Now execute the script to generate the data and the CSV file.


"""

!python generate_student_data.py

"""## Create dataframe

### Subtask:
Load the generated data into a pandas DataFrame.

**Reasoning**:
Import the pandas library and load the students.csv file into a pandas DataFrame, then display the first few rows.
"""

import pandas as pd

df_students = pd.read_csv('students.csv')
display(df_students.head())

"""## Perform sql-like queries

### Subtask:
Demonstrate how to use pandas functions to perform common SQL operations like selecting columns, filtering rows, sorting, and grouping.

**Reasoning**:
Perform the requested pandas operations: select columns, filter rows, sort by enrollment date, and group by instrument to calculate the average age.
"""

# 1. Select 'name' and 'instrument' columns
selected_columns_df = df_students[['name', 'instrument']]
print("✅ Selected 'name' and 'instrument' columns:")
display(selected_columns_df)

# 2. Filter rows for students 17 years or older
filtered_age_df = df_students[df_students['age'] >= 17]
print("✅ Filtered rows for students 17 years or older:")
display(filtered_age_df)

# 3. Sort by 'enrollment_date' in ascending order
sorted_enrollment_df = df_students.sort_values(by='enrollment_date', ascending=True)
print("✅ Sorted by 'enrollment_date':")
display(sorted_enrollment_df)

# 4. Group by 'instrument' and calculate the average age
average_age_by_instrument = df_students.groupby('instrument')['age'].mean().reset_index()
print("✅ Average age by instrument:")
display(average_age_by_instrument)